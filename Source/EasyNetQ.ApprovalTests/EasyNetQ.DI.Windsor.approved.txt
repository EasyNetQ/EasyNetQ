namespace Castle.Windsor
{
    public static class EasyNetQWindsorContainerExtensions
    {
        public static Castle.Windsor.IWindsorContainer RegisterEasyNetQ(this Castle.Windsor.IWindsorContainer container, System.Func<EasyNetQ.DI.IServiceResolver, EasyNetQ.ConnectionConfiguration> connectionConfigurationFactory) { }
        public static Castle.Windsor.IWindsorContainer RegisterEasyNetQ(this Castle.Windsor.IWindsorContainer container, string connectionString) { }
        public static Castle.Windsor.IWindsorContainer RegisterEasyNetQ(this Castle.Windsor.IWindsorContainer container, System.Func<EasyNetQ.DI.IServiceResolver, EasyNetQ.ConnectionConfiguration> connectionConfigurationFactory, System.Action<EasyNetQ.DI.IServiceRegister> registerServices) { }
        public static Castle.Windsor.IWindsorContainer RegisterEasyNetQ(this Castle.Windsor.IWindsorContainer container, string connectionString, System.Action<EasyNetQ.DI.IServiceRegister> registerServices) { }
    }
}
namespace EasyNetQ.DI.Windsor
{
    public class RemovableNamingSubSystem : Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem
    {
        public RemovableNamingSubSystem(Castle.MicroKernel.SubSystems.Naming.INamingSubSystem namingSubSystem) { }
        public void RemoveHandler(System.Type serviceType) { }
    }
    public class WindsorAdapter : EasyNetQ.DI.IServiceRegister
    {
        public WindsorAdapter(Castle.Windsor.IWindsorContainer container) { }
        protected virtual void ConfigureContainer(Castle.Windsor.IWindsorContainer container) { }
        public EasyNetQ.DI.IServiceRegister Register(System.Type serviceType, object implementationInstance) { }
        public EasyNetQ.DI.IServiceRegister Register(System.Type serviceType, System.Func<EasyNetQ.DI.IServiceResolver, object> implementationFactory, EasyNetQ.DI.Lifetime lifetime = 1) { }
        public EasyNetQ.DI.IServiceRegister Register(System.Type serviceType, System.Type implementationType, EasyNetQ.DI.Lifetime lifetime = 1) { }
        public EasyNetQ.DI.IServiceRegister TryRegister(System.Type serviceType, object implementationInstance) { }
        public EasyNetQ.DI.IServiceRegister TryRegister(System.Type serviceType, System.Func<EasyNetQ.DI.IServiceResolver, object> implementationFactory, EasyNetQ.DI.Lifetime lifetime = 1) { }
        public EasyNetQ.DI.IServiceRegister TryRegister(System.Type serviceType, System.Type implementationType, EasyNetQ.DI.Lifetime lifetime = 1) { }
    }
    public static class WindsorContainerExtensions
    {
        public static Castle.Windsor.IWindsorContainer RemoveHandler(this Castle.Windsor.IWindsorContainer container, System.Type serviceType) { }
    }
}